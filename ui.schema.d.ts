/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type PageType = 'screen' | 'popup';
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
export type ButtonElement = InputElement & {
  type: 'button';
  [k: string]: unknown;
};
export type InputElement = Element & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
} & {
  placeholder?: string;
  validations?: Validation;
  value?: string;
  readonly?: boolean;
  [k: string]: unknown;
};
export type ElementType =
  | 'button'
  | 'text'
  | 'textfield'
  | 'textarea'
  | 'password'
  | 'radio'
  | 'checkbox'
  | 'select'
  | 'fileUpload'
  | 'fileDownload'
  | 'date'
  | 'time'
  | 'table'
  | 'pagination'
  | 'image'
  | 'icon'
  | 'link';
export type ElementDisplay = 'inline' | 'block';
export type TextElement = Element & {
  type: 'text';
  size?: TextSize;
  color?: Color;
  [k: string]: unknown;
};
export type TextSize = 'small' | 'medium' | 'large' | 'xlarge';
export type Color = 'black' | 'red' | 'green' | 'gray';
export type TextInputElement = InputElement & {
  type: 'textfield';
  [k: string]: unknown;
};
export type TextAreaElement = InputElement & {
  type: 'textarea';
  rows?: number;
  [k: string]: unknown;
};
export type PasswordInputElement = InputElement & {
  type: 'password';
  [k: string]: unknown;
};
export type CheckboxElement = InputElement & {
  type: 'checkbox';
  checked?: boolean;
  [k: string]: unknown;
};
export type RadioElement = InputElement & {
  type: 'radio';
  checked?: boolean;
  [k: string]: unknown;
};
export type SelectElement = InputElement & {
  type: 'select';
  options: SelectOption[];
  [k: string]: unknown;
};
export type FileUploadElement = InputElement & {
  type: 'fileUpload';
  accept?: string[];
  [k: string]: unknown;
};
export type FileDownloadElement = Element & {
  type: 'fileDownload';
  [k: string]: unknown;
};
export type DateInputElement = InputElement & {
  type: 'date';
  format?: string;
  [k: string]: unknown;
};
export type TimeInputElement = InputElement & {
  type: 'time';
  format?: string;
  [k: string]: unknown;
};
export type ImageElement = Element & {
  type: 'image';
  src: string;
  [k: string]: unknown;
};
export type IconElement = Element & {
  type: 'icon';
  src: string;
  size?: string;
  [k: string]: unknown;
};
export type LinkElement = Element & {
  type: 'link';
  href: string;
  target?: string;
  [k: string]: unknown;
};
export type PaginationElement = Element & {
  type: 'pagination';
  [k: string]: unknown;
};
export type TableElement = Element & {
  type: 'table';
  columns: TableColumn[];
  selectable?: boolean;
  sortable?: boolean;
  [k: string]: unknown;
};

export interface UIJson {
  description?: string;
  todo?: string;
  ui: string;
  /**
   * @minItems 1
   */
  systems: [System, ...System[]];
  [k: string]: unknown;
}
export interface System {
  description?: string;
  todo?: string;
  id: string;
  name: string;
  /**
   * @minItems 1
   */
  pages: [Page, ...Page[]];
  [k: string]: unknown;
}
export interface Page {
  description?: string;
  todo?: string;
  id: string;
  type: PageType;
  name: string;
  events?: PageEvent;
  /**
   * @minItems 1
   */
  elements: [
    (
      | ButtonElement
      | TextElement
      | TextInputElement
      | TextAreaElement
      | PasswordInputElement
      | CheckboxElement
      | RadioElement
      | SelectElement
      | FileUploadElement
      | FileDownloadElement
      | DateInputElement
      | TimeInputElement
      | ImageElement
      | IconElement
      | LinkElement
      | PaginationElement
      | TableElement
    ),
    ...(
      | ButtonElement
      | TextElement
      | TextInputElement
      | TextAreaElement
      | PasswordInputElement
      | CheckboxElement
      | RadioElement
      | SelectElement
      | FileUploadElement
      | FileDownloadElement
      | DateInputElement
      | TimeInputElement
      | ImageElement
      | IconElement
      | LinkElement
      | PaginationElement
      | TableElement
    )[]
  ];
  [k: string]: unknown;
}
export interface PageEvent {
  load?: EventHandler;
  unload?: EventHandler;
  [k: string]: unknown;
}
export interface EventHandler {
  description?: string;
  todo?: string;
  action: string;
  success: string;
  error?: string;
  api?: API;
  [k: string]: unknown;
}
export interface API {
  description?: string;
  todo?: string;
  path: string;
  method: HttpMethod;
  request: RecordString;
  response?: RecordString;
  [k: string]: unknown;
}
export interface RecordString {
  [k: string]: unknown;
}
export interface Element {
  description?: string;
  todo?: string;
  id: string;
  type: ElementType;
  name: string;
  display?: ElementDisplay;
  disable?: string;
  visible?: string;
  events?: ElementEvent;
  [k: string]: unknown;
}
export interface ElementEvent {
  click?: EventHandler;
  change?: EventHandler;
  focus?: EventHandler;
  blur?: EventHandler;
  [k: string]: unknown;
}
export interface Validation {
  required?: boolean;
  minLength?: number;
  maxLength?: number;
  pattern?: string;
  number?: boolean;
  min?: number;
  max?: number;
  email?: boolean;
  url?: boolean;
  phone?: boolean;
  [k: string]: unknown;
}
export interface SelectOption {
  label: string;
  value: string;
  [k: string]: unknown;
}
export interface TableColumn {
  description?: string;
  todo?: string;
  id: string;
  title: string;
  sortable?: boolean;
  filterable?: boolean;
  format?: string;
  [k: string]: unknown;
}
